%%% Effpi - verified message-passing programs in Dotty
%%% Copyright 2019 Alceste Scalas and Elias Benussi
%%% Released under the MIT License: https://opensource.org/licenses/MIT

%%% Always eventually input from an observable xx,
%%% possibly after some \tau-steps,
%%% or I/O on some yy in a set of allowed observables
nu Z . (
  ( % Ensure that no "imprecise" actions exist
    (forall t1, t3: Type, c2: ChanType .
      [i(t1, ctype(c2), t3)]false && [i(ctype(c2), t1, t3)]false &&
      [o(t1, ctype(c2), t3)]false && [o(ctype(c2), t1, t3)]false)
  )
  &&
  mu Z2 . (
    ( % Find the expected input...
      (exists t3, xx: Type . val(xx in {$observed$}) &&
        <i(xx, xx, t3)>true)
    )
    ||
    ( % Check recursively along all \tau-actions...
      (forall t1, t2, t3: Type . [t(t1, t2, t3)]Z2)
      &&
      % Check recursively along all relied channels, and probes
      (forall t3, yy: Type .
        (val(yy in {$relied$}) || val(yy in {$probes$})) =>
          ([i(yy, yy, t3)]Z2 && [o(yy, yy, t3)]Z2)
      )
      &&
      [tau]Z2
    )
  )
  &&
  ( % Ensure that some "allowed" action exists
    (exists zz: Variable, t3: Type . <t(tvar(zz), tvar(zz), t3)>true)
    ||
    (exists xx, t3: Type .
      val(xx in {$observed_relied_probes$}) &&
        (<i(xx, xx, t3)>true || <o(xx, xx, t3)>true))
    ||
    <tau>true
  )
  &&
  ( % Recursively check continuations along all probes on observed actions
    (forall xx, zz: Type . (val(xx in {$observed$}) && val(zz in {$observed_relied_probes$}) ) => (
      [i(xx, xx, zz)]Z && [o(xx, xx, zz)]Z
    ))
    &&
    % Check recursively along I/O on all relied channels and probes
    (forall t3, yy: Type . (val(yy in {$relied$}) || val(yy in {$probes$}))  =>
      [i(yy, yy, t3)]Z && [o(yy, yy, t3)]Z
    )
    % Check recursively along all tau-actions
    &&
    (forall zz: Variable, t3: Type . [t(tvar(zz), tvar(zz), t3)]Z)
    &&
    [tau]Z
  )
)
